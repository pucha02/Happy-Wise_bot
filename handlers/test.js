import { testMenuKeyboard } from '../keyboards.js';
import { questions } from '../questionsForTEst.js';
import { sendQuestion } from '../sendQuestion.js';
import { sendToKeyCRM } from '../sendToKeyCRM.js';

const isTakingTest = {};
const currentQuestion = {};
const countTrueAnswers = {};
const levelStats = {};

const levelEndings = [3, 7, 11, 15, 19];
const levelNames = ["Beginner (preA1)", "Elementary (A1)", "Pre-Intermediate (A2)", "Intermediate (B1)", "Upper-Intermediate (B2)"];
const requiredAccuracy = 0.7;

export function testHandler(bot, updateLastInteractionTime) {
  bot.onText(/–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å/, async (msg) => {
    const chatId = msg.chat.id;
    await updateLastInteractionTime(chatId);

    await bot.sendMessage(chatId, '–û–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—åüëá', testMenuKeyboard);
  });

  bot.onText(/–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç/, async (msg) => {
    const chatId = msg.chat.id;
    isTakingTest[chatId] = true;
    currentQuestion[chatId] = 0;
    countTrueAnswers[chatId] = 0;
    levelStats[chatId] = levelEndings.map((_, i) => ({ level: levelNames[i], correct: 0, total: 0 }));

    await bot.sendMessage(chatId, '–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó! –î–ª—è –≤–∏—Ö–æ–¥—É –∑ —Ç–µ—Å—Ç—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–í–∏–π—Ç–∏ –∑ —Ç–µ—Å—Ç—É".');
    sendQuestion(chatId, questions, currentQuestion, bot);
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    if (msg.text === '–í–∏–π—Ç–∏ –∑ —Ç–µ—Å—Ç—É') {
      isTakingTest[chatId] = false;
      await bot.sendMessage(chatId, '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —Ç–µ—Å—Ç—É.', testMenuKeyboard);
      return;
    }

    if (isTakingTest[chatId]) {
      const questionData = questions[currentQuestion[chatId]];
      const levelIndex = levelEndings.findIndex(ending => currentQuestion[chatId] <= ending);

      levelStats[chatId][levelIndex].total++;
      if (msg.text === questionData.answer) {
        countTrueAnswers[chatId]++;
        levelStats[chatId][levelIndex].correct++;
      }

      if (levelEndings.includes(currentQuestion[chatId])) {
        const questionsInLevel = levelStats[chatId][levelIndex].total;
        const correctAnswersInLevel = levelStats[chatId][levelIndex].correct;
        const accuracy = correctAnswersInLevel / questionsInLevel;

        if (accuracy < requiredAccuracy) {
          const reachedLevel = levelNames[levelIndex - 1];
          const reachedLevelall = levelNames[levelIndex];
          if (levelIndex > 0) {
            await bot.sendMessage(
              chatId,
              `–í–∞—à —Ä—ñ–≤–µ–Ω—å: ${reachedLevel}. –í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –º–µ–Ω—à–µ ${Math.round(requiredAccuracy * 100)}% –ø–∏—Ç–∞–Ω—å —Ä—ñ–≤–Ω—è ${reachedLevelall}.`,
              testMenuKeyboard
            );

            await bot.sendMessage(
              chatId,
              `–ß—É–¥–æ–≤–æ, —É –≤–∞—Å –≤–∂–µ —î –ø–µ–≤–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω—å! –ú–∏ –º–æ–∂–µ–º–æ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –π–æ–≥–æ —â–µ –±—ñ–ª—å—à–µ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É  "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è —ñ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∫—É—Ä—Å, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –¥–æ—Å—è–≥—Ç–∏ –Ω–æ–≤–∏—Ö –≤–∏—Å–æ—Ç —É –≤–∏–≤—á–µ–Ω–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏!`,
              testMenuKeyboard
            );

            sendLevelSummary(chatId, bot, levelIndex);
            isTakingTest[chatId] = false;
            return;
          } else {
            await bot.sendMessage(
              chatId,
              `–í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –º–µ–Ω—à–µ ${Math.round(requiredAccuracy * 100)}% –ø–∏—Ç–∞–Ω—å —Ä—ñ–≤–Ω—è ${reachedLevelall}`,
              testMenuKeyboard
            );
            await bot.sendMessage(
              chatId,
              `–ù–µ –∑–∞—Å–º—É—á—É–π—Ç–µ—Å—å! –í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É  "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è —ñ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", —ñ –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –¥–ª—è –≤–∞—Å –∫—É—Ä—Å, –Ω–∞ —è–∫–æ–º—É –≤–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–æ—Å—è–≥–Ω–µ—Ç–µ —Å–≤–æ—î—ó –º–µ—Ç–∏ —É –≤–∏–≤—á–µ–Ω–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏!`,
              testMenuKeyboard
            );
            sendLevelSummary(chatId, bot, levelIndex);
            isTakingTest[chatId] = false;
            return;
          }

        }

        if (levelIndex <= 3) {
          await bot.sendMessage(chatId, `üéâ –ö—Ä—É—Ç–æ! –í–∏ –ø—Ä–æ–π—à–ª–∏ —Ä—ñ–≤–µ–Ω—å ${levelNames[levelIndex]}. –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: ${levelNames[levelIndex + 1]}.`);

        } else {
          await bot.sendMessage(
            chatId,
            `–í—ñ—Ç–∞—î–º–æ! üéâ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∏ –≤—Å—ñ —Ä—ñ–≤–Ω—ñ —Ç–µ—Å—Ç—É —ñ –ø–æ–∫–∞–∑–∞–ª–∏ —á—É–¥–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏. –í–∞—à —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω—å –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –º–æ–≤—ñ –≤–∂–µ –≤–∏—Å–æ–∫–∏–π!`,
            testMenuKeyboard
          );

          await bot.sendMessage(
            chatId,
            `–•–æ—á–µ—Ç–µ —â–µ –±—ñ–ª—å—à–µ —É–¥–æ—Å–∫–æ–Ω–∞–ª–∏—Ç–∏ —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –≤–ø–µ–≤–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –≤ –±—É–¥—å-—è–∫–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö? üìö –ù–∞—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ—Å—É–Ω—É—Ç—ñ –∫—É—Ä—Å–∏ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –∑–∞–∫—Ä—ñ–ø–∏—Ç–∏ –∑–Ω–∞–Ω–Ω—è —ñ –¥–æ–¥–∞–¥—É—Ç—å –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó —è–∫ —É –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ–π, —Ç–∞–∫ —ñ –≤ –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω—ñ–π —Å—Ñ–µ—Ä—ñ.`,
            testMenuKeyboard
          );

          await bot.sendMessage(
            chatId,
            `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üìû "–ó–≤'—è–∑–∞—Ç–∏—Å—è —ñ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–∏, —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –≤–∞–º –¥–æ—Å—è–≥—Ç–∏ –Ω–æ–≤–∏—Ö –≤–∏—Å–æ—Ç —É –≤–æ–ª–æ–¥—ñ–Ω–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é! –ú–∏ –ø—ñ–¥–±–µ—Ä–µ–º–æ –∫—É—Ä—Å, —â–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å —Å–∞–º–µ –≤–∞–º.`,
            testMenuKeyboard
          );

        }
      }

      currentQuestion[chatId]++;

      if (currentQuestion[chatId] < questions.length) {
        sendQuestion(chatId, questions, currentQuestion, bot);
      } else {
        await bot.sendMessage(
          chatId,
          `‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${countTrueAnswers[chatId]} –∑ ${questions.length} (${((countTrueAnswers[chatId] / questions.length) * 100).toFixed(2)}%). –î—è–∫—É—é –∑–∞ —É—á–∞—Å—Ç—å!`,
          testMenuKeyboard
        );
        sendLevelSummary(chatId, bot, levelEndings.length - 1);
        isTakingTest[chatId] = false;
      }
    }
  });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω—è–º
const sendLevelSummary = async (chatId, bot, lastCompletedLevelIndex) => {
  const summary = levelStats[chatId]
    .slice(0, lastCompletedLevelIndex + 1)
    .map(stat => `–†—ñ–≤–µ–Ω—å ${stat.level}: ${stat.correct} –∑ ${stat.total} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π`)
    .join('\n');

  await bot.sendMessage(chatId, `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ –ø—Ä–æ–π–¥–µ–Ω–∏—Ö —Ä—ñ–≤–Ω—è—Ö:\n${summary}`);
};


export function contactManagerHandler(bot, updateLastInteractionTime) {
  const awaitingContactInfo = {};

  bot.onText(/–ó–≤'—è–∑–∞—Ç–∏—Å—è —ñ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º/, async (msg) => {
    const chatId = msg.chat.id;
    awaitingContactInfo[chatId] = true;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω.");
    await updateLastInteractionTime(chatId);
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
  
    if (awaitingContactInfo[chatId]) {
      const contactInfo = msg.text.split(',');
  
      if (contactInfo.length < 2) {
        await bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω.");
      } else {
        const fullName = contactInfo[0].trim();
        const phone = contactInfo[1].trim();
  
        // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
        const lastLevelIndex = levelStats[chatId].findLastIndex(stat => stat.total > 0);
        const clientLevel = lastLevelIndex > 0 && lastLevelIndex < 4 ? levelNames[lastLevelIndex - 1] : lastLevelIndex == 0 ? '–ù–µ –ø—Ä–æ–π—à–æ–≤ 1 —Ä—ñ–≤–µ–Ω—å' : lastLevelIndex >= 4 ? levelNames[lastLevelIndex] : '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ';
  
        const contactData = {
          full_name: `${fullName} ${clientLevel}`,
          level: clientLevel,
          phone: phone,
          chatId: chatId
        };
  
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º
        await bot.sendMessage(chatId, `–î—è–∫—É—é! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º: ${phone}`);
        awaitingContactInfo[chatId] = false;  // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
  
        sendToKeyCRM(contactData);
      }
      await updateLastInteractionTime(chatId);
    }
  });
  
}