import TelegramBot from 'node-telegram-bot-api';
import { mainMenu, startKeyboard, testMenuKeyboard } from './keyboards.js';
import {sendToKeyCRM} from './sendToKeyCRM.js';

const token = '8093162300:AAERaFyiqaWZn_mkAwtyYtd9epPHNvSFX0s';
const bot = new TelegramBot(token, { polling: true });

function setBotCommands() {
    const botCommands = [
      { command: '/start', description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞' },
    ];
  
    bot.setMyCommands(botCommands).then(() => {
      console.log('–ö–æ–º–∞–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }).catch((error) => {
      console.error('–ü–æ–º–∏–ª–∫–∞', error);
    });
  }
  
  setBotCommands();

const questions = [
  {
    question: 'What is the correct form of the verb in the sentence: "He _____ to the store every day."',
    options: ['go', 'goes', 'going'],
    answer: 'goes'
  },
  {
    question: 'Choose the correct article: "She is _____ engineer."',
    options: ['a', 'an', 'the'],
    answer: 'an'
  },
  {
    question: 'Which word is a synonym of "happy"?',
    options: ['sad', 'joyful', 'angry'],
    answer: 'joyful'
  }
];

let currentQuestion = {};
let isTakingTest = {};
let countTrueAnswers = {};

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  await bot.sendMessage(chatId, '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç —à–∫–æ–ª–∏ Happy&Wise. –†–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –Ω–∞ —à–ª—è—Ö—É –¥–æ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏!');
  await bot.sendMessage(chatId, "–ú–∏ —Ä–æ–∑—Ä–æ–±–∏–ª–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –º–µ—Ç–æ–¥–∏–∫—É –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ —Ä—ñ–≤–Ω—è –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –ø–ª–∞–Ω –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –≤–∞—Å. –ù–∞—Å—Ç—É–ø–Ω–∏–º –∫—Ä–æ–∫–æ–º –ø—Ä–æ–ø–æ–Ω—É—é –ø—Ä–æ–π—Ç–∏ –Ω–µ–≤–µ–ª–∏–∫–∏–π —Ç–µ—Å—Ç, –ø—ñ—Å–ª—è —è–∫–æ–≥–æ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–∏, —ñ –º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–∞ –ø–æ–¥–∞–ª—å—à–∏—Ö –∫—Ä–æ–∫—ñ–≤.");
  await bot.sendMessage(chatId, '–ì–æ—Ç–æ–≤—ñ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç?', startKeyboard);
});

bot.onText(/–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, '–û–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—åüëá', mainMenu);
});

bot.onText(/–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å/, async (msg) => {
    const chatId = msg.chat.id;
  
    await bot.sendMessage(chatId, '–û–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—åüëá', testMenuKeyboard);
});

bot.onText(/–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç/, async (msg) => {
  const chatId = msg.chat.id;
  isTakingTest[chatId] = true;
  currentQuestion[chatId] = 0;
  countTrueAnswers[chatId] = 0;

  await bot.sendMessage(chatId, '–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó! –î–ª—è –≤–∏—Ö–æ–¥—É –∑ —Ç–µ—Å—Ç—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–í–∏–π—Ç–∏ –∑ —Ç–µ—Å—Ç—É".');
  sendQuestion(chatId);
});

const sendQuestion = async (chatId) => {
  const questionData = questions[currentQuestion[chatId]];
  const options = questionData.options.map(option => ({ text: option }));

  await bot.sendMessage(chatId, questionData.question, {
    reply_markup: {
      keyboard: [options, [{ text: '–í–∏–π—Ç–∏ –∑ —Ç–µ—Å—Ç—É' }]],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });
};

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  if (msg.text === '–í–∏–π—Ç–∏ –∑ —Ç–µ—Å—Ç—É') {
    isTakingTest[chatId] = false;
    await bot.sendMessage(chatId, '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —Ç–µ—Å—Ç—É.', testMenuKeyboard);
    return;
  }

  if (isTakingTest[chatId]) {
    const questionData = questions[currentQuestion[chatId]];

    if (msg.text === questionData.answer) {
        currentQuestion[chatId]++;
        countTrueAnswers[chatId]++
    } else {
        currentQuestion[chatId]++;
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    if (currentQuestion[chatId] < questions.length) {
      sendQuestion(chatId);
    } else {
      await bot.sendMessage(chatId, `–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π ${Object.values(countTrueAnswers)}. –î—è–∫—É—é –∑–∞ —É—á–∞—Å—Ç—å!`, testMenuKeyboard);
      isTakingTest[chatId] = false;
    }
  }
});

bot.onText(/üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è —ñ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º /, (msg) => {
  bot.sendMessage(msg.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.");

  bot.once('message', (contactMsg) => {
    const contactInfo = contactMsg.text.split(',');

    if (contactInfo.length < 2) {
      bot.sendMessage(contactMsg.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω.");
      return;
    }

    const fullName = contactInfo[0].trim();
    const phone = contactInfo[1].trim();

    const contactData = {
      full_name: fullName,
      phone: phone,
    };

    bot.sendMessage(contactMsg.chat.id, `–î—è–∫—É—é! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º: ${phone}`);

    sendToKeyCRM(contactData);
  });
});
